{"version":3,"sources":["UserInfo.js","Users.js","App.js","serviceWorker.js","index.js"],"names":["UserInfo","props","show","modalState","setModalState","useState","moment","Date","toLocaleString","format","date","setDate","Modal","onHide","centered","Header","closeButton","Title","Body","style","textAlign","type","value","onChange","event","target","className","activeHours","filter","data","start_time","length","map","index","key","end_time","Users","setActiveHours","userData","user","cursor","data-toggle","data-target","onClick","activity_periods","width","height","viewBox","fill","xmlns","fillRule","d","real_name","tz","App","setUserData","useEffect","fetch","then","json","response","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6RAmCeA,MA/Bf,SAAkBC,GAAQ,IAAD,cAEeA,EAAMC,KAFrB,GAEdC,EAFc,KAEFC,EAFE,OAGGC,mBAASC,IAAOC,OAAOC,kBAAkBC,OAAO,eAHnD,mBAGdC,EAHc,KAGRC,EAHQ,KAQrB,OACI,kBAACC,EAAA,EAAD,CAAOV,KAAMC,EAAYU,OAAQ,kBAAMT,GAAeD,IAAaW,UAAQ,GACvE,kBAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACrB,kBAACJ,EAAA,EAAMK,MAAP,8BAEJ,kBAACL,EAAA,EAAMM,KAAP,KACI,yBAAKC,MAAO,CAAEC,UAAW,QACrB,oDACA,2BAAOC,KAAK,OAAOC,MAAOZ,EAAMa,SAX7B,SAACC,GAChBb,EAAQL,IAAOkB,EAAMC,OAAOH,OAAOb,OAAO,mBAYlC,yBAAKiB,UAAU,eACX,4CAAuB,0BAAMA,UAAU,aAAhB,KAAoC,2CAE9DzB,EAAM0B,YAAYC,QAAO,SAAAC,GAAI,OAAIvB,IAAOuB,EAAKC,YAAYrB,OAAO,gBAAkBC,KAAMqB,OAAS,EAAI9B,EAAM0B,YAAYC,QAAO,SAAAC,GAAI,OAAIvB,IAAOuB,EAAKC,YAAYrB,OAAO,gBAAkBC,KAAMsB,KAAI,SAACH,EAAMI,GAAP,OAC9L,yBAAKC,IAAKD,EAAOP,UAAU,eACvB,8BAAOG,EAAKC,YAAkB,0BAAMJ,UAAU,aAAhB,KAAoC,8BAAOG,EAAKM,cAEjF,yBAAKT,UAAU,eAAf,4BCANU,MA1Bf,SAAenC,GAAQ,IAAD,EAEkBI,oBAAS,GAF3B,mBAEXF,EAFW,KAECC,EAFD,OAGoBC,qBAHpB,mBAGXsB,EAHW,KAGEU,EAHF,KAQlB,OACI,yBAAKX,UAAU,WACVzB,EAAMqC,SAASN,KAAI,SAACO,EAAMN,GAAP,OAChB,yBAAKC,IAAKD,EAAOP,UAAU,wBAEvB,yBAAKA,UAAU,mBAAmBP,MAAO,CAAEqB,OAAQ,WAAaC,cAAY,QAAQC,cAAY,gBAAgBC,QAAS,kBATtHd,EASsIU,EAAKK,iBAR1JP,EAAeR,QACfzB,GAAeD,GAFD,IAAC0B,IAUC,yBAAKgB,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYrB,UAAU,oBAAoBsB,KAAK,eAAeC,MAAM,8BACtG,0BAAMC,SAAS,UAAUC,EAAE,gFAE/B,uCAAaZ,EAAKa,WAClB,2CAAiBb,EAAKc,SAGjClD,GAAc,kBAAC,EAAD,CAAUD,KAAM,CAACC,EAAYC,GAAgBuB,YAAaA,MCJtE2B,MAjBf,WAAgB,IAAD,EAEmBjD,qBAFnB,mBAENiC,EAFM,KAEIiB,EAFJ,KAUb,OANAC,qBAAU,WACRC,MAAM,8CAA8CC,MAAK,SAAA7B,GAAI,OAAIA,EAAK8B,UAAQD,MAAK,SAAAE,GACjFL,EAAY,YAAIK,SAEjB,IAGD,yBAAKlC,UAAU,OACZY,GAAY,kBAAC,EAAD,CAAOA,SAAUA,MCHhBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d8b0dfc5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport moment from 'moment';\r\n\r\nfunction UserInfo(props) {\r\n\r\n    const [modalState, setModalState] = props.show\r\n    const [date, setDate] = useState(moment(Date().toLocaleString()).format('YYYY-MM-DD'));\r\n\r\n    const datePicker = (event) => {\r\n        setDate(moment(event.target.value).format('YYYY-MM-DD'));\r\n    }\r\n    return (\r\n        <Modal show={modalState} onHide={() => setModalState(!modalState)} centered >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Active Time Interval</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div style={{ textAlign: \"end\" }}>\r\n                    <label>Check with Date :</label>\r\n                    <input type=\"date\" value={date} onChange={datePicker} />\r\n                </div>\r\n                <div className=\"text-center\">\r\n                    <span>Start Time</span><span className=\"ml-1 mr-1\">:</span><span>End Time</span>\r\n                </div>\r\n                {props.activeHours.filter(data => moment(data.start_time).format('YYYY-MM-DD') === date).length > 0 ? props.activeHours.filter(data => moment(data.start_time).format('YYYY-MM-DD') === date).map((data, index) => (\r\n                    <div key={index} className=\"text-center\">\r\n                        <span>{data.start_time}</span><span className=\"ml-1 mr-1\">:</span><span>{data.end_time}</span>\r\n                    </div>\r\n                )) : <div className=\"text-center\">No Active Hours Found</div>}\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default UserInfo;","import React, { useState } from 'react';\r\nimport UserInfo from './UserInfo';\r\n\r\nfunction Users(props) {\r\n\r\n    const [modalState, setModalState] = useState(false);\r\n    const [activeHours, setActiveHours] = useState();\r\n    const openModal = (data) => {\r\n        setActiveHours(data);\r\n        setModalState(!modalState);\r\n    }\r\n    return (\r\n        <div className=\"row m-5\">\r\n            {props.userData.map((user, index) => (\r\n                <div key={index} className=\"col-12 col-sm-3 mb-2\">\r\n\r\n                    <div className=\"card text-center\" style={{ cursor: \"Pointer\" }} data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={() => openModal(user.activity_periods)}>\r\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-person-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path fillRule=\"evenodd\" d=\"M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\" />\r\n                        </svg>\r\n                        <div>Name : {user.real_name}</div>\r\n                        <div>Location : {user.tz}</div>\r\n                    </div>\r\n                </div>))}\r\n            {modalState && <UserInfo show={[modalState, setModalState]} activeHours={activeHours} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import React, { useEffect, useState } from 'react';\r\nimport Users from './Users';\r\n\r\nfunction App() {\r\n\r\n  const [userData, setUserData] = useState()\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://testjsonfull.herokuapp.com/members\").then(data => data.json()).then(response => {\r\n      setUserData([...response])\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {userData && <Users userData={userData} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}